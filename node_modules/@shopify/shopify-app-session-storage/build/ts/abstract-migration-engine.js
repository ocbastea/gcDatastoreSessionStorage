"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractMigrationEngine = void 0;
var tslib_1 = require("tslib");
var types_1 = require("./types");
var AbstractMigrationEngine = /** @class */ (function () {
    function AbstractMigrationEngine(db, opts) {
        if (opts === void 0) { opts = {}; }
        this.options = tslib_1.__assign(tslib_1.__assign({}, types_1.defaultSessionStorageMigratorOptions), opts);
        this.connection = db;
        this.ready = this.initMigrationPersistence();
    }
    AbstractMigrationEngine.prototype.applyMigrations = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, migrationName, migrationFunction, migrationApplied, e_1_1;
            var e_1, _d;
            return tslib_1.__generator(this, function (_e) {
                switch (_e.label) {
                    case 0: return [4 /*yield*/, this.ready];
                    case 1:
                        _e.sent();
                        _e.label = 2;
                    case 2:
                        _e.trys.push([2, 9, 10, 11]);
                        _a = tslib_1.__values(this.getMigrationList()), _b = _a.next();
                        _e.label = 3;
                    case 3:
                        if (!!_b.done) return [3 /*break*/, 8];
                        _c = _b.value, migrationName = _c.migrationName, migrationFunction = _c.migrationFunction;
                        return [4 /*yield*/, this.hasMigrationBeenApplied(migrationName)];
                    case 4:
                        migrationApplied = _e.sent();
                        if (!!migrationApplied) return [3 /*break*/, 7];
                        return [4 /*yield*/, migrationFunction(this.connection)];
                    case 5:
                        _e.sent();
                        return [4 /*yield*/, this.saveAppliedMigration(migrationName)];
                    case 6:
                        _e.sent();
                        _e.label = 7;
                    case 7:
                        _b = _a.next();
                        return [3 /*break*/, 3];
                    case 8: return [3 /*break*/, 11];
                    case 9:
                        e_1_1 = _e.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 11];
                    case 10:
                        try {
                            if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 11: return [2 /*return*/, Promise.resolve()];
                }
            });
        });
    };
    AbstractMigrationEngine.prototype.getMigrationList = function () {
        return this.options.migrations;
    };
    AbstractMigrationEngine.prototype.validateMigrationList = function (migrationList) {
        var e_2, _a, e_3, _b;
        if (this.options !== null)
            try {
                for (var migrationList_1 = tslib_1.__values(migrationList), migrationList_1_1 = migrationList_1.next(); !migrationList_1_1.done; migrationList_1_1 = migrationList_1.next()) {
                    var migrationName = migrationList_1_1.value.migrationName;
                    var entryFound = false;
                    try {
                        for (var _c = (e_3 = void 0, tslib_1.__values(this.options.migrations)), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var optionMigration = _d.value;
                            if (migrationName === optionMigration.migrationName) {
                                entryFound = true;
                                break;
                            }
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                    if (!entryFound) {
                        throw new types_1.InvalidMigrationConfigurationError("'Internal migrations are missing, add the 'migrationList' from the 'migrations.ts' file");
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (migrationList_1_1 && !migrationList_1_1.done && (_a = migrationList_1.return)) _a.call(migrationList_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
    };
    return AbstractMigrationEngine;
}());
exports.AbstractMigrationEngine = AbstractMigrationEngine;
//# sourceMappingURL=abstract-migration-engine.js.map